// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAMPLESCHEMA_SAMPLE_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SAMPLESCHEMA_SAMPLE_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace sample {
namespace schema {

struct InertialValue;
struct InertialValueBuilder;

struct InertialValue FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InertialValueBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  int16_t x() const {
    return GetField<int16_t>(VT_X, 0);
  }
  bool mutate_x(int16_t _x = 0) {
    return SetField<int16_t>(VT_X, _x, 0);
  }
  int16_t y() const {
    return GetField<int16_t>(VT_Y, 0);
  }
  bool mutate_y(int16_t _y = 0) {
    return SetField<int16_t>(VT_Y, _y, 0);
  }
  int16_t z() const {
    return GetField<int16_t>(VT_Z, 0);
  }
  bool mutate_z(int16_t _z = 0) {
    return SetField<int16_t>(VT_Z, _z, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_X, 2) &&
           VerifyField<int16_t>(verifier, VT_Y, 2) &&
           VerifyField<int16_t>(verifier, VT_Z, 2) &&
           verifier.EndTable();
  }
};

struct InertialValueBuilder {
  typedef InertialValue Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int16_t x) {
    fbb_.AddElement<int16_t>(InertialValue::VT_X, x, 0);
  }
  void add_y(int16_t y) {
    fbb_.AddElement<int16_t>(InertialValue::VT_Y, y, 0);
  }
  void add_z(int16_t z) {
    fbb_.AddElement<int16_t>(InertialValue::VT_Z, z, 0);
  }
  explicit InertialValueBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InertialValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InertialValue>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InertialValue> CreateInertialValue(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t x = 0,
    int16_t y = 0,
    int16_t z = 0) {
  InertialValueBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const sample::schema::InertialValue *GetInertialValue(const void *buf) {
  return ::flatbuffers::GetRoot<sample::schema::InertialValue>(buf);
}

inline const sample::schema::InertialValue *GetSizePrefixedInertialValue(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<sample::schema::InertialValue>(buf);
}

inline InertialValue *GetMutableInertialValue(void *buf) {
  return ::flatbuffers::GetMutableRoot<InertialValue>(buf);
}

inline sample::schema::InertialValue *GetMutableSizePrefixedInertialValue(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<sample::schema::InertialValue>(buf);
}

inline bool VerifyInertialValueBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<sample::schema::InertialValue>(nullptr);
}

inline bool VerifySizePrefixedInertialValueBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<sample::schema::InertialValue>(nullptr);
}

inline void FinishInertialValueBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<sample::schema::InertialValue> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInertialValueBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<sample::schema::InertialValue> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace sample

#endif  // FLATBUFFERS_GENERATED_SAMPLESCHEMA_SAMPLE_SCHEMA_H_
